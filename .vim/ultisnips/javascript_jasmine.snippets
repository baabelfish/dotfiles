#
# JavaScript versions -- from the TextMate bundle + some additions
# for jasmine-jquery matchers
#
#extends javascript

snippet des "Describe (js)" b
describe('${1:description}', function() {
    $0
});
endsnippet

snippet it "it (js)" b
it('${1:description}', function() {
    $0
});
endsnippet

snippet bef "before each (js)" b
beforeEach(function() {
    $0
});
endsnippet

snippet aft "after each (js)" b
afterEach(function() {
    $0
});
endsnippet

snippet any "any (js)" b
jasmine.any($1)
endsnippet

snippet ru "runs (js)" b
runs(function() {
    $0
});
endsnippet

snippet wa "waits (js)" b
waits($1);
endsnippet

snippet ex "expect (js)" b
expect(${1:target})$0;
endsnippet

snippet ee "expect to equal (js)" b
expect(${1:target}).toEqual(${2:value});
endsnippet

snippet em "expect to match (js)" b
expect(${1:target}).toMatch(${2:pattern});
endsnippet

snippet eha "expect to have attribute (js)" b
expect(${1:target}).toHaveAttr('${2:attr}'${3:, '${4:value}'});
endsnippet

snippet et "expect to be truthy (js)" b
expect(${1:target}).toBeTruthy();
endsnippet

snippet ef "expect to be falsy (js)" b
expect(${1:target}).toBeFalsy();
endsnippet

snippet ed "expect to be defined (js)" b
expect(${1:target}).toBeDefined();
endsnippet

snippet en "expect to be null (js)" b
expect(${1:target}).toBeNull();
endsnippet

snippet ec "expect to contain (js)" b
expect(${1:target}).toContain(${2:value});
endsnippet

snippet ev "expect to be visible (js)" b
expect(${1:target}).toBeVisible();
endsnippet

snippet eh "expect to be hidden (js)" b
expect(${1:target}).toBeHidden();
endsnippet

snippet notx "expect not (js)" b
expect(${1:target}).not$0;
endsnippet

snippet note "expect not to equal (js)" b
expect(${1:target}).not.toEqual(${2:value});
endsnippet

snippet notm "expect not to match (js)" b
expect(${1:target}).not.toMatch(${2:pattern});
endsnippet

snippet notha "expect to not have attribute (js)" b
expect(${1:target}).not.toHaveAttr('${2:attr}'${3:, '${4:value}'});
endsnippet

snippet nott "expect not to be truthy (js)" b
expect(${1:target}).not.toBeTruthy();
endsnippet

snippet notf "expect not to be falsy (js)" b
expect(${1:target}).not.toBeFalsy();
endsnippet

snippet notd "expect not to be defined (js)" b
expect(${1:target}).not.toBeDefined();
endsnippet

snippet notn "expect not to be null (js)" b
expect(${1:target}).not.toBeNull();
endsnippet

snippet notc "expect not to contain (js)" b
expect(${1:target}).not.toContain(${2:value});
endsnippet

snippet notv "expect not to be visible (js)" b
expect(${1:target}).not.toBeVisible();
endsnippet

snippet noth "expect not to be hidden (js)" b
expect(${1:target}).not.toBeHidden();
endsnippet

snippet s "spy on (js)" b
spyOn(${1:object}, '${2:method}')$0;
endsnippet

snippet sr "spy on and return (js)" b
spyOn(${1:object}, '${2:method}').andReturn(${3:arguments});
endsnippet

snippet st "spy on and throw (js)" b
spyOn(${1:object}, '${2:method}').andThrow(${3:exception});
endsnippet

snippet sct "spy on and call through (js)" b
spyOn(${1:object}, '${2:method}').andCallThrough();
endsnippet

snippet scf "spy on and call fake (js)" b
spyOn(${1:object}, '${2:method}').andCallFake(${3:function});
endsnippet

snippet esc "expect was called (js)" b
expect(${1:target}).wasCalled();
endsnippet

snippet escw "expect was called with (js)" b
expect(${1:target}).wasCalledWith(${2:arguments});
endsnippet

snippet notsc "expect was not called (js)" b
expect(${1:target}).wasNotCalled();
endsnippet

snippet noscw "expect was not called with (js)" b
expect(${1:target}).wasNotCalledWith(${2:arguments});
endsnippet

snippet directive "Angular directive" !b
angular.module('${1:app}')
    .directive('${2:view}', function() {
    return {
        templateUrl: 'views/${3:name}.html',
        restrict: '${4:A/E/C/M}'
    };
});
endsnippet

snippet controller "Angular controller" !b
angular.module('${1:app}')
    .controller('${2:controller}', function($scope${4}) {
    $0
});
endsnippet

snippet factory "Angular factory" !b
angular.module('${1:app}').factory('${2:Factory}', ['$resource', function($resource) {
    return $resource('${3:URL}', {
        ${4}
    }, {
    ${5:query} : {
        method : '${6:GET}'
    }$0
    });
}]);
endsnippet

snippet cl "logloglog" !b
console.log(${VISUAL}${1});$0
endsnippet

snippet if "" !b
if (${1:true}) {
    ${VISUAL}$0
}
endsnippet

snippet else "" !wb
else {
    ${VISUAL}$0
}
endsnippet

snippet require "" !b
var ${1:express} = require('$1');
endsnippet

snippet emain "" !b
var port = ${1:8000};

var express = require('express');
var http = require('http');
var path = require('path');
var crypto = require('crypto');
var app = express();

app.set('port', process.env.PORT || port);
app.use(express.bodyParser());
app.use(express.session());

app.get('/${2}', function(req, res) {
    res.send(200);
});

$0

http.createServer(app).listen(app.get('port'), function(){
  console.log('Express server listening on port ' + app.get('port'));
});
endsnippet

snippet include "" !b
require('./${1:file}.js')(express, app${2});$0
endsnippet

snippet eget "" !b
app.get('/${1:hello}', function(req, res) {
    params = req.params;
    query = req.query;
    $0
});
endsnippet

snippet send "" !b
res.send(${1:200}${2:, ${3:data}});
endsnippet

snippet epost "" !b
app.post('/${1:hello}', function(req, res) {
    params = req.route.params;
    query = req.query;
    post = req.body;
    $0
});
endsnippet

snippet eput "" !b
app.put('/${1:hello}', function(req, res) {
    params = req.route.params;
    query = req.query;
    post = req.body;
    $0
});
endsnippet

snippet edelete "" !b
app.delete('/${1:hello}', function(req, res) {
    params = req.route.params;
    query = req.query;
    post = req.body;
    $0
});
endsnippet

snippet mgschema "Mongoose schema" !b
var ${1:name} = mongoose.model('$1', {
    $0
});
endsnippet
snippet mgfield "" !b
${2:name}: { type: ${3:String/Number/Date/Buffer/Boolean/Mixed/ObjectId/Array}, required: ${4:true}, unique: ${5:false} },$0
endsnippet

snippet eexport "Export functions with require('')();" !b
module.exports = function(${1:app}) {
    $0
}
endsnippet

snippet mginit "Inits mongodb" !b
var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/${1:test}');$0
endsnippet

snippet mgfind "Mongoose mongodb find" !b
mongoose.model('${1:Model}').find({${2}}, function(err, ${3:ref}) {
    if (err) {
        console.log(err);
        res.send(${4:500});
    } else {
        res.send($3);
    }
});
endsnippet

snippet mgsave "Mongoose mongodb save" !b
var ${1:Model} = mongoose.model('$1');
var ${2:item} = new $1({
    ${3}
});
$2.save(function(err, $2) {
    if (err) {
        res.send(${4:500});${5}
    } else {
        res.send($2);$0
    }
});
endsnippet

snippet func "" !b
function ${1:name}(${2}) {
    $0
}
endsnippet

snippet gruntfile "" !b
module.exports = function(grunt) {
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        $0
    });
    grunt.loadNpmTasks('grunt-contrib-connect');
    grunt.registerTask('default', ['connect']);
};
endsnippet
